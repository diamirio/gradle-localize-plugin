plugins {
    id 'com.gradle.plugin-publish'
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

apply plugin: 'maven-publish'

group 'com.tailoredapps.gradle'
version '0.3.4'

// We need to keep compatibility to Java 8 here, as otherwise projects on some machines targeting Java 11 will not be
// able to load the plugin.
targetCompatibility = 1.8
sourceCompatibility = 1.8

def ext_displayName = 'Gradle Localize Plugin'
def ext_description = 'Gradle Plugin to generate Android string resource files from a localization spreadsheet.'
def ext_website = 'https://github.com/tailoredmedia/gradle-localize-plugin'
def ext_vcs = 'https://github.com/tailoredmedia/gradle-localize-plugin.git'
def ext_labels = ['gradle', 'android', 'localization']

repositories {
    mavenCentral()
}

dependencies {
    implementation Kotlin.stdlib.jdk8
    implementation KotlinX.coroutines.core

    implementation libs.google.api.client
    implementation libs.google.api.services.sheets

    implementation libs.diffutils

    implementation KotlinX.serialization.json


    testImplementation Testing.junit4
    testImplementation libs.kluent
    testImplementation KotlinX.coroutines.test
    testImplementation Testing.mockK

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


gradlePlugin {
    plugins {
        simplePlugin {
            id = 'com.tailoredapps.gradle.localize'
            implementationClass = 'com.tailoredapps.gradle.localize.GradleLocalizePlugin'
        }
    }
}

task sourceJar(type: Jar) {
    description = "An archive of the source code for Maven Central"
    classifier = 'sources'
    from sourceSets.main.allSource
}


// configuration for publishing to the Gradle plugins portal
pluginBundle {
    website = ext_website
    vcsUrl = ext_vcs
    description = ext_description
    tags = ext_labels
}


Properties properties = new Properties()
def credentialPropertiesFile = ""
def injectedCredentialsFilePath = System.getenv('CREDENTIALS_PROPERTIES_FILE')
if (injectedCredentialsFilePath != null && !injectedCredentialsFilePath.isEmpty()) {
    credentialPropertiesFile = injectedCredentialsFilePath
} else {
    credentialPropertiesFile = 'local.properties'
}
try {
    properties.load(project.rootProject.file(credentialPropertiesFile).newDataInputStream())
} catch (IOException e) {
    println("'${credentialPropertiesFile}' not found. This can be ignored, unless you want to publish. " + e.localizedMessage)
}


// Configure the maven-publish plugin
publishing {
    publications {
        localizePlugin(MavenPublication) {
            from components.java
            artifact sourceJar
            pom {
                name = ext_displayName
                description = ext_description
                url = ext_website
                packaging = 'jar'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'tailoredmedia'
                        name = 'Tailored Apps'
                        email = 'office@tailored-apps.com'
                    }
                }
                scm {
                    connection = ext_vcs
                    developerConnection = ext_vcs
                    url = ext_website
                }
            }
        }
    }

    repositories {
        maven {
            url 'https://maven.tailored-apps.com/repository/maven-public'
            credentials {
                username properties.getProperty("maven.publish.username")
                password properties.getProperty("maven.publish.password")
            }
        }
    }
}
